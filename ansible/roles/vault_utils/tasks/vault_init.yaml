---
- include_tasks: pre_check.yaml

- name: Check for vault namespace
  kubernetes.core.k8s_info:
    kind: Namespace
    name: "{{ vault_ns }}"
  register: vault_ns_rc
  until: vault_ns_rc.resources | length > 0
  retries: 20
  delay: 45

- name: Check if the vault pod is present
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ vault_ns }}"
    name: "{{ vault_pod }}"
  register: vault_pod_rc
  until: vault_pod_rc.resources | length > 0
  retries: 20
  delay: 45

# This needs retrying because during startup we can just get
# Failed to execute on pod vault-0 due to : (0)\nReason: Handshake status 500 Internal Server Error
# In the above case there is no 'rc' in vault_status. So first we wait for 'rc' to show up and ignore
# any errors, and then we bail out if rc is 2 as it means the vault is already initialized
- name: Check for the vault status
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: vault status -format=json
  register: vault_status_json
  until: "'rc' in vault_status_json"
  retries: 15
  delay: 10
  failed_when: "'stdout_lines' not in vault_status_json"

- name: Set vault status output json fact
  ansible.builtin.set_fact:
    vault_status: "{{ vault_status_json.stdout | from_json }}"
  when: vault_status_json.stdout_lines | length > 0

# If the vault is already initialized we skip all the tasks below
- name: Is the vault initialized?
  ansible.builtin.set_fact:
    vault_initialized: vault_status['initialized'] | bool

# Note that the 'realpath' filter explicitely only resolves on the ansible/local box
# which is fine in our case
- name: Set absolute path for output_file
  ansible.builtin.set_fact:
    output_file_abs: "{{ output_file | realpath }}"
  when:
    - not vault_initialized
    - file_unseal

- name: Check for existence of "{{ output_file_abs }}"
  ansible.builtin.stat:
    path: "{{ output_file_abs }}"
  register: result
  when:
    - not vault_initialized
    - file_unseal

- name: Rename "{{ output_file_abs }} if it exists"
  ansible.builtin.copy:
    src: "{{ output_file_abs }}"
    dest: "{{ output_file_abs }}.bak"
    mode: '0600'
  when:
    - not vault_initialized
    - file_unseal
    - result.stat.exists

# We need to retry here because the vault service might be starting
# and can return a 500 internal server until its state is fully ready
- name: Init vault operator
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: vault operator init -format=json
  register: vault_init_json_out
  until: vault_init_json_out is not failed
  retries: 10
  delay: 15
  when: not vault_initialized

- name: Set vault init output json fact
  ansible.builtin.set_fact:
    vault_init_json: "{{ vault_init_json_out.stdout | from_json }}"
  when: not vault_initialized

# We store the the operator unseal keys and root token to a file when
# the vault was not already initialized *and* when unseal_from_cluster
# is set to false
- name: Save vault operator output (local file)
  ansible.builtin.copy:
    follow: true
    dest: "{{ output_file_abs }}"
    content: "{{ vault_init_json | to_nice_json }}"
    mode: '0600'
  when:
    - not vault_initialized
    - file_unseal

# We store the the operator unseal keys and root token to a secret inside
# the cluster when the vault was not already initialized *and* when
# unseal_from_cluster is set to true
- name: Save vault operator output (into a secret inside the cluster)
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: "{{ unseal_secret }}"
        namespace: "{{ unseal_namespace }}"
      data:
        vault_init_json: "{{ vault_init_json | to_nice_json | b64encode }}"
  when:
    - not vault_initialized
    - not file_unseal
